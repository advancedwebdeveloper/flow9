import tools/flowc/incremental/fitype;
import tools/flowc/fcexp;

export {
	// This mirrors FcExp, except we loose all positions, and we require types
	FiExp ::= FiLambda, FiCall, FiVar, FiLet, FiIf, FiSwitch, FiCast, FiSeq, 
			  FiCallPrim, FiConst, FiRequire, FiUnsafe;
		FiLambda(args: [FiFunArg], body: FiExp, type : FiTypeFunction, start : int);
		FiCall(f: FiExp, args: [FiExp], type : FiType, start : int);
		FiVar(name: string, type : FiType, start : int);
		FiLet(name: string, type : FiType, e1: FiExp, e2: FiExp, type2 : FiType, start : int);
		FiIf(e1: FiExp, e2: FiExp, e3: FiExp, type : FiType, start : int);
		FiSwitch(x: FiVar, switchType : FiType, cases: [FiCase], type : FiType, start : int);
			// struct is "default" for default case
			FiCase(struct: string, argNames : [string], body: FiExp, start : int);
		FiCast(e: FiExp, tFrom : FiType, tTo : FiType, type : FiType, start : int);
		FiSeq(es: [FiExp], type : FiType, start : int);
		FiCallPrim(op: FcPrim, es: [FiExp], type : FiType, start : int);
		FiRequire(flowfile : string, e : FiExp, type : FiType, start : int);
		FiUnsafe(name : string, fallback : FiExp, type : FiType, start : int);

	FiConst ::= FiVoid, FiDouble, FiInt, FiString, FiBool;
		FiVoid(start : int);
		FiDouble(d : double, start : int);
		FiInt(i : int, start : int);
		FiString(s : string, start : int);
		FiBool(b: bool, start : int);
}
