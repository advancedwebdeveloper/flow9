import form/form;
import transforms;

asForm(f : Form) -> Form { f }; // typing errors resolving helper

constNone : ConstBehaviour<Maybe<Point>> = const(None());

findTaggedFormPositionB(form : Form, tag : int) -> Pair<Form, Behaviour<Maybe<Point>>> {
	switch (form : Form) {
		Translate(bx, by, f): {
			t = findTaggedFormPositionB(f, tag);
			Pair(
				Translate(bx, by, t.first) |> asForm,
				if (t.second == constNone)
					constNone
				else
					select3(t.second, bx, by, \cpv,x,y -> maybeMap(cpv, \p -> Point(p.x + x, p.y + y)))
			);
		}
		Scale(bx, by, f): {
			t = findTaggedFormPositionB(f, tag);
			Pair(
				Scale(bx, by, t.first),
				if (t.second == constNone)
					constNone
				else
					select3(t.second, bx, by, \cpv,x,y -> maybeMap(cpv, \p -> Point(p.x * x, p.y * y)))
			);
		}
		default: Pair(Empty(), constNone);
	}
}
