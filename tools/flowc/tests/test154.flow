import form/paragraphtypes;

ParaWord(
	word : ParaAtomic,
	metrics : Behaviour<FormMetrics>,
	ghosted : Ghosted,
	form: GhostForm,
	interactivityIdM : Maybe<int>
);

// Intermediately used typed as a union of ParagraphElement and WrapElement and ParaOneWord
ParaElement ::= ParagraphElement, WrapElement, ParaAtomic;

// After expanding elements to words
ParaAtomic ::= Form, ParaOneWord, TextElement, InteractiveParaAtomic;
	// A range of elements that need to be on the same line
	ParaOneWord(elements : [Form]);
	InteractiveParaAtomic(elem : ParaAtomic, interactivityId : int);



GhostForm ::= Form, Ghosted;
	Ghost(xc : DynamicBehaviour<double>, yc : DynamicBehaviour<double>, form : Form);

Ghosted ::= Empty, Ghost, CoordinateInspectElement, InspectGhost;
	CoordinateInspectElement(index : int, xc : DynamicBehaviour<double>, yc : DynamicBehaviour<double>, wh : DynamicBehaviour<WidthHeight>, lineHeight : DynamicBehaviour<double>, form : Form);
	InspectGhost(
		xc : DynamicBehaviour<double>,
		yc : DynamicBehaviour<double>,
		wh : DynamicBehaviour<WidthHeight>,
		lineHeight : DynamicBehaviour<double>,
		lineNumber : DynamicBehaviour<int>,
		form : Form
	);


errorFunction() -> void {
	makeParaWord2 = \word2, form2 -> {
		g = word2.ghosted;
		replaceWordGhosted = \ -> {
			switch (g : Ghosted) {
				Empty(): Empty();
				Ghost(xc, yc, __): Ghost(xc, yc, form2);
				InspectGhost(xc, yc, wh, lh, ln, __): InspectGhost(xc, yc, wh, lh, ln, form2);
				CoordinateInspectElement(index, x, y, wh, lh, __): CoordinateInspectElement(index, x, y, wh, lh, form2);
			}
		};

		ghosted : Ghosted = replaceWordGhosted();
		ghostedForm = {
			switch (g : Ghosted) {
				Empty(): g;
				default: replaceWordGhosted();
			};
		};
		ParaWord(word2.word, const(FormMetrics(0.0, 0.0, 0.0, 0.0)), ghosted, ghostedForm, word2.interactivityIdM);
	};
}
