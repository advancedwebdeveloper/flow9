Behaviour<?> ::= ConstBehaviour<?>, DynamicBehaviour<?>;
	// The runtime representation of a behaviour
	DynamicBehaviour(value : ref ?);
	ConstBehaviour : (constv : ?);

WidthHeight(width : double, height : double);

Form ::= Text, Empty;

Text : (text : string, style : [int]);

Empty : ();

	SForm ::= BaseSForm, ControlSForm;
		BaseSForm ::= Text, FixedSForm;
			FixedSForm : (width : double, height : double);

		ControlSForm ::= ResizeCell;

			// Resize the content to the available space, as well as optional alignment
			ResizeCell : (resizeToWidth : bool, resizeToHeight : bool, preserveAspectRatio : bool, alignX : double, alignY : double, content : BaseSForm);

	Coordinates(awh : Behaviour<WidthHeight>);

make(value : ?) -> DynamicBehaviour<?> {
	DynamicBehaviour(ref value)
}

const(value : ?) -> ConstBehaviour<?> {
	ConstBehaviour(value)
}

getValue(behaviour : Behaviour<?>) -> ? {
	switch (behaviour : Behaviour) {
		ConstBehaviour(v): v;
		DynamicBehaviour(v): ^v;
	}
}

next(behaviour : DynamicBehaviour<?>, value : ?) -> void {

}

sform2form(coordinates : Coordinates, sform : SForm, outSize : DynamicBehaviour<WidthHeight>) -> Form {
	passSizeOutAndReturn = \width, height -> \form -> {
		next(outSize, WidthHeight(width, height));
		form
	};
	switch (sform : SForm) {
		ResizeCell(toW, toH, preserveAspect, alignX, alignY, content) : {
			awh = coordinates.awh;
			size = makeWH();

			select2(awh, size, \wh, sz -> if (sz.width > 0.0) wh.width / sz.width else 1.0);
			Empty();
		}
		default: Empty();
		FixedSForm(width, height) : Fixed(width, height) |> passSizeOutAndReturn(width, height);
	}
}

Fixed(width : double, height : double) -> Form {
	Empty();
}
makeWH() -> DynamicBehaviour<WidthHeight> {
	make(WidthHeight(0.0, 0.0));
}

select2(b1 : Behaviour<?>, b2 : Behaviour<??>, fn : (?, ??) -> ???) -> Behaviour<???> {
	const(fn(getValue(b1), getValue(b2)))
}
