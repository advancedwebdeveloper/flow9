import tools/flowc/incremental/fiprogram;
		
fiCollectDeclarationsCommon(program : FiProgram) {
	fold(program.traversal, [], \macc: [Pair<string, [FiDeclaration]>], file -> {
		m = lookupTree(program.modules, file);
		switch (m) {
			None(): {
				fcPrintln("Could not find module '" + file + "'");
				macc;
			}
			Some(module): {
				nativeNames = buildSet(map(module.natives, \n -> n.name));
				notNatives = filter(module.initOrder, \mn -> !containsSet(nativeNames, mn));

				// TODO: Does 'initOrder' strictly follow makeInitOrder(...)?
				decls = concat(
					module.natives,
					filtermap(notNatives, \name -> lookupTree(program.names.toplevel, name))
				);
				arrayPush(macc, Pair(module.fileinfo.flowfile, decls));
			}
		}
	});
}
