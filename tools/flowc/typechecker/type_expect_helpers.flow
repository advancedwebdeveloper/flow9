import tools/flowc/fctypeenv;
import tools/flowc/prettyprint;
import tools/flowc/fcexp_description;

export {
	fcExpect2string(env : FcTypeEnv, e : FcTypeExpect) -> string;
}

fcExpect2string(env : FcTypeEnv, e : FcTypeExpect) -> string {
	pt = \t -> prettyFcType(FcPretty(false, false, ^(env.local.tyvars), ^(env.local.typars)), t, makeSet());
	pe = \ex -> fcexpDescription(ex) + " " + strLeft(prettyFcExp(FcPretty(true, false, ^(env.local.tyvars), ^(env.local.typars)), ex), 80);
	switch (e) {
		FcLessOrEqual(t1, t2, d, __, ex): {
			"(" + pt(t1) + ")⁺ c= (" + pt(t2) + ")⁻   from   " + d + " in " + pe(ex);
		}
		FcExpectField(field, ftype, t1, __, ex): {
			pt(t1) + " c= (." + field + " : " + pt(ftype) + ")   from   " + pe(ex);
		}
		FcSetMutableField(stype, field, ftype, __): {
			pt(stype) + "." + field + " ::= " + pt(ftype);
		}
		FcVerifyType(t1, t2, d, __, ex): {
			"(" + pt(t1) + ")⁺ = (" + pt(t2) + ")⁺ from   " + d + " in " + pe(ex);
		}
	}
}

fcCheck2string(env : FcTypeEnv, e : FcTypeCheck) -> string {
	pt = \t -> prettyFcType(FcPretty(false, false, ^(env.local.tyvars), ^(env.local.typars)), t, makeSet());
	switch (e) {
		FcExpectOneOf(bs, t, __): {
			superglue(bs, pt, " or ") + " in " + pt(t);
		}
		FcCheckStructs(st, open, t, __): {
			"<" + strGlue(st, ", ") + (if (open) ", default" else "") + "> in " + pt(t)
		}
		FcCheckMutable(field, t, __): {
			field + " mutable in " + pt(t);
		}
		FcNotVoid(t, __): {
			pt(t) + " not void";
		}
		FcNotFunction(t, __): {
			pt(t) + " not function";
		}
	}
}
