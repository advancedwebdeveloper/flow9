import tools/flowc/fcexp;

export {
	// Expectations for the types for the type checking algorithm
	FcTypeExpect ::= FcLessOrEqual, FcExpectField, FcVerifyType, FcSetMutableField;

		// Biunification
		FcLessOrEqual(output : FcType, input : FcType, description : string, info : FcInfo2, e : FcExp);

		// The type t should have at least this field of the given fieldType.
		FcExpectField(field : string, fieldType : FcType, t : FcType, info : FcInfo2, e : FcExp);

		// Set the field in this struct to the give type
		FcSetMutableField(struct : FcType, field : string, ftype : FcType, info : FcInfo2);

		// Use to verify a type annotation as well as a downcast, where we know the exact type
		FcVerifyType(type : FcType, declared : FcType, description : string, info : FcInfo2, e : FcExp);

	// Checks we should do at the end, once we know the type
	FcTypeCheck ::= FcExpectOneOf, FcCheckStructs, FcCheckMutable, FcNotVoid, FcNotFunction;

		// Only base types allowed here, but exact match
		FcExpectOneOf(types : [FcBaseType], type : FcType, info : FcInfo2);

		// The type should be a subset of these structs. If open is true, then we have a default and it can be bigger
		FcCheckStructs(names : [string], open : bool, t : FcType, info : FcInfo2);

		// Check that this type has a mutable field of this name
		FcCheckMutable(field : string, type : FcType, info : FcInfo2);

		// Any input type except void. Arguments to calls and let values
		FcNotVoid(t : FcType, info : FcInfo2);

		// Not a function type
		FcNotFunction(t : FcType, info : FcInfo2);
}
