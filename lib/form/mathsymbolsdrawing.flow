// Â© Copyright 2011 Area9 Technologies.

import basecolors;
import form/gui;
import form/form;
import form/mathdrawingstructs;

export {
	drawCustomSymbol(symbol : CustomSymbol, size : double) -> Form;
	drawCustomSymbolWithColor(symbol : CustomSymbol, size : double, color : int) -> Form;

	drawResistor(size : double) -> Form;
	drawResistorWithColor(size : double, color : int) -> Form;

	drawCapacitor(size : double) -> Form;
	drawCapacitorWithColor(size : double, color : int) -> Form;

	drawInductor(size : double) -> Form;
	drawInductorWithColor(size : double, color : int) -> Form;

	drawDcSupply(size : double) -> Form;
	drawDcSupplyWithColor(size : double, color : int) -> Form;

	drawAcSupply(size : double) -> Form;
	drawAcSupplyWithColor(size : double, color : int) -> Form;

	drawDiode(size : double) -> Form;
	drawDiodeWithColor(size : double, color : int) -> Form;

	drawDiv(size : double) -> Form;
	drawDivWithColor(size : double, color : int) -> Form;

	drawQuestionableEquals(size : double) -> Form;
	drawQuestionableEqualsWithColor(size : double, color : int) -> Form;
}

drawCustomSymbol(symbol : CustomSymbol, size : double) -> Form {
	drawCustomSymbolWithColor(symbol, size, black)
}
drawCustomSymbolWithColor(symbol : CustomSymbol, size : double, color : int) -> Form {
	switch(symbol.symbol : CustomSymbolType) {
		CustomSymbolDiode() : drawDiodeWithColor(size, color);
		CustomSymbolInductor() : drawInductorWithColor(size, color);
		CustomSymbolResistor() : drawResistorWithColor(size, color);
		CustomSymbolDcSupply() : drawDcSupplyWithColor(size, color);
		CustomSymbolAcSupply() : drawAcSupplyWithColor(size, color);
		CustomSymbolCapacitor() : drawCapacitorWithColor(size, color);
		CustomSymbolDiv() : drawDivWithColor(size, color);
		CustomSymbolQuestionableEquals() : drawQuestionableEqualsWithColor(size, color);
	}
}

drawResistor(size : double) -> Form {
	drawResistorWithColor(size, black)
}
drawResistorWithColor(size_ : double, color : int) -> Form {
	style = [Stroke(color)];
	size = size_ * 0.8;
	scale = size / 12.0;
	totalWidth = 57.0 * scale;
	borderLineWidth = 16.0 * scale;
	steps = 12;
	step = (totalWidth - 2.0 * borderLineWidth) / i2d(steps);
	zeroLineHeight = size * 0.5;
	getPointHeight = \i -> {
		[zeroLineHeight, 0.0, zeroLineHeight, size][i % 4]
	}
	points = concatA([
		[
			MoveTo(0.0, zeroLineHeight),
			LineTo(borderLineWidth, zeroLineHeight)
		],
		generate(1, steps + 1, \i -> LineTo(borderLineWidth + i2d(i) * step, getPointHeight(i))),
		[LineTo(totalWidth, zeroLineHeight)]
	]);
	Graphics(points, style)
}

drawCapacitor(size : double) -> Form {
	drawCapacitorWithColor(size, black)
}
drawCapacitorWithColor(size_ : double, color : int) -> Form {
	style = [Stroke(color)];
	size = size_ * 4.0 / 3.0;
	scale = size / 20.0;
	totalWidth = 57.0 * scale;
	borderLineWidth = 25.0 * scale;
	zeroLineHeight = size * 0.5;
	points = [
			MoveTo(0.0, zeroLineHeight),
			LineTo(borderLineWidth, zeroLineHeight),
			MoveTo(borderLineWidth, 0.0),
			LineTo(borderLineWidth, size),
			MoveTo(totalWidth - borderLineWidth, 0.0),
			LineTo(totalWidth - borderLineWidth, size),
			MoveTo(totalWidth - borderLineWidth, zeroLineHeight),
			LineTo(totalWidth, zeroLineHeight)
	];
	Graphics(points, style)

}

drawInductor(size : double) -> Form {
	drawInductorWithColor(size, black)
}

drawInductorWithColor(size_ : double, color : int) -> Form {
	style = [Stroke(color)];
	size = size_ * 0.8;
	scale = size / 12.0;
	totalWidth = 57.0 * scale;
	borderLineWidth = 15.0 * scale;
	borderCurveWidth = 3.0 * scale;
	zeroLineHeight = size * 0.5;
	stepsCount = 4;
	step = (totalWidth - 2.0 * (borderLineWidth + borderCurveWidth)) / i2d(stepsCount + 1);

	pointsA = [
			MoveTo(0.0, zeroLineHeight),
			LineTo(borderLineWidth, zeroLineHeight),
			CubicBezierTo(
						borderLineWidth + borderCurveWidth,
						1.0,
						borderLineWidth,
						size * 0.25
			),
			LineTo(totalWidth - borderLineWidth - borderCurveWidth, 1.0),
			CubicBezierTo(
						totalWidth - borderLineWidth,
						zeroLineHeight,
						totalWidth - borderLineWidth,
						size * 0.25
			),
			LineTo(totalWidth, zeroLineHeight)
	];
	pointsB =  generate(1, stepsCount + 1, \i -> {
		x = borderLineWidth + borderCurveWidth + i2d(i) * step;
		[
			MoveTo(x, 0.0),
			CubicBezierTo(x, size, x - step, zeroLineHeight),
			CubicBezierTo(x, 0.0, x + step, zeroLineHeight),
	]}) |> concatA;
	points = concat(pointsA, pointsB);
	Graphics(points, style)
}

drawDcSupply(size : double) -> Form {
	drawDcSupplyWithColor(size, black)
}
drawDcSupplyWithColor(size_ : double, color : int) -> Form {
	style = [Stroke(color)];
	size = size_ * 4.0 / 3.0;
	scale = size / 20.0;
	totalWidth = 57.0 * scale;
	borderLineWidth = 26.0 * scale;
	zeroLineHeight = size * 0.5;
	points = [
			MoveTo(0.0, zeroLineHeight),
			LineTo(borderLineWidth, zeroLineHeight),
			MoveTo(borderLineWidth, size * 0.25),
			LineTo(borderLineWidth, size * 0.75),
			MoveTo(totalWidth - borderLineWidth - 1.0, 0.0),
			LineTo(totalWidth - borderLineWidth - 1.0, size),
			MoveTo(totalWidth - borderLineWidth, zeroLineHeight),
			LineTo(totalWidth, zeroLineHeight)
	];
	Graphics(points, style)
}

drawAcSupply(size : double) -> Form {
	drawAcSupplyWithColor(size, black)
}
drawAcSupplyWithColor(size_ : double, color : int) -> Form {
	style = [Stroke(color)];
	size = size_ * 4.0 / 3.0;
	scale = size / 20.0;
	totalWidth = 57.0 * scale;
	borderLineWidth = 18.0 * scale;
	zeroLineHeight = size * 0.5;
	radius = 10.0 * scale;
	radius2 = 2.5 * scale;
	points = [
			MoveTo(0.0, zeroLineHeight),
			LineTo(borderLineWidth, zeroLineHeight),
			MoveTo(totalWidth - borderLineWidth, zeroLineHeight),
			LineTo(totalWidth, zeroLineHeight)
	];
	Group([
		Graphics(points, style),
		Circle(totalWidth * 0.5, zeroLineHeight, radius, style),
		CustomSector2(totalWidth * 0.5, zeroLineHeight - radius2, radius2, 0.0, 180.0, false, style),
		CustomSector2(totalWidth * 0.5, zeroLineHeight + radius2, radius2, 180.0, 360.0, false, style),
	])
}

drawDiode(size : double) -> Form {
	drawDiodeWithColor(size, black)
}

drawDiodeWithColor(size_ : double, color : int) -> Form {
	style = [Stroke(color)];
	size = size_ * 4.0 / 3.0;
	scale = size / 20.0;
	totalWidth = 57.0 * scale;
	borderLineWidth = 21.0 * scale;
	triangleHeight = 14.0 * scale;
	zeroLineHeight = size * 0.5;
	points = [
			MoveTo(0.0, zeroLineHeight),
			LineTo(borderLineWidth, zeroLineHeight),
			MoveTo(borderLineWidth + 1.0, 0.0),
			LineTo(borderLineWidth + 1.0, size),
			LineTo(borderLineWidth + triangleHeight, zeroLineHeight),
			LineTo(borderLineWidth + 1.0, 0.0),
			MoveTo(borderLineWidth + triangleHeight + 1.0, 1.0),
			LineTo(borderLineWidth + triangleHeight + 1.0, size - 1.0),
			MoveTo(borderLineWidth + triangleHeight + 1.0, zeroLineHeight),
			LineTo(totalWidth, zeroLineHeight)
	];
	Graphics(points, style)
}

drawDiv(size : double) -> Form {
	drawDivWithColor(size, black)
}

drawDivWithColor(size : double, color : int) -> Form {
	scale = size / 18.0;
	r = 2.0 * scale;
	w = 10.0 * scale;
	zeroLineHeight = size * 0.5;
	circleOffset = r + 2.0 * scale;
	Group([
		Graphics([MoveTo(0.0, zeroLineHeight), LineTo(w, zeroLineHeight)], [Stroke(color)]),
		Circle(w * 0.5, zeroLineHeight - circleOffset, r, [Fill(color)]),
		Circle(w * 0.5, zeroLineHeight + circleOffset, r, [Fill(color)])
	])
}

drawQuestionableEquals(size : double) -> Form {
	drawQuestionableEqualsWithColor(size, black)
}

drawQuestionableEqualsWithColor(size : double, color : int) -> Form {
	topWidth = make(0.0);
	top = Inspect([Width(topWidth)], Border(0.0, 0.0, 0.0, - size * 0.4, Text("?", [FontSize(size * 0.6), Fill(color)])));
	bottomWidth = make(0.0);
	bottom = Inspect([Width(bottomWidth)], Text("=", [FontSize(size), Fill(color)]));
	topDx = select2(topWidth, bottomWidth, \t, b -> (b - t) * 0.5);
	//Align2(0.5, 0.0) does not work correctly for some reason.
	Lines([
		Translate(topDx, zero, top),
		bottom
	])


}
