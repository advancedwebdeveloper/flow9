// Â© Copyright 2011 Area9 Technologies.

import form/form;

export {
	makeRightArrow(width: double, totalHeight: double, bodyHeight: double, roundRadius: double, styles: [GraphicsStyle]) -> Form;
	// next arrow has a cavity
	makeNextRightArrow(width: double, totalHeight: double, bodyHeight: double, roundRadius: double, styles: [GraphicsStyle]) -> Form;
	makeLeftArrow(width: double, totalHeight: double, bodyHeight: double, roundRadius: double, styles: [GraphicsStyle]) -> Form;
}

sqr2 = 1.41421356;
/*
                    corner tip
                      |\
             corner-> | \
               _______|  \
     cavity -> \   body   \
               /_______   / arrow tip
                      |  /
                      | /
                      |/
*/


makeRightArrow(width: double, totalHeight: double, bodyHeight: double, roundRadius: double, styles: [GraphicsStyle]) {
	corner = (totalHeight - bodyHeight) / 2.0;
	arrowStart = width - bodyHeight / 2.0 - corner;
	
	r = roundRadius;
	// smoothness of the arrow tip, chosen to look nice
	rr = r/2.0;
	// smoothness of the corner tips, chosen to look nice
	ra = if (corner != 0.0) r*1.2 else 0.0;
	
	Graphics([
			MoveTo(r, corner),
			LineTo(arrowStart, corner),
			LineTo(arrowStart, ra * sqr2 / 2.0),
			CubicBezierTo(arrowStart + ra * sqr2 / 2.0, ra * sqr2 / 2.0, arrowStart + ra * (sqr2 - 1.0), ra * (sqr2 - 1.0)),
			LineTo(width - rr, totalHeight/2.0 - rr),
			CubicBezierTo(width - rr, totalHeight/2.0 + rr, width, corner + bodyHeight/2.0),
			LineTo(arrowStart + ra * sqr2 / 2.0, totalHeight - ra * sqr2 / 2.0),
			CubicBezierTo(
				arrowStart, 
				totalHeight - ra * sqr2 / 2.0, 
				arrowStart + ra * (sqr2 - 1.0),
				totalHeight - ra * (sqr2 - 1.0), 
			),
			LineTo(arrowStart, corner + bodyHeight),
			LineTo(r, corner + bodyHeight),
			CubicBezierTo(0.0, corner + bodyHeight - r, 0.0, corner + bodyHeight),
			LineTo(0.0, corner + r),
			CubicBezierTo(r, corner, 0.0, corner)
		],
		styles
	)
}

makeNextRightArrow(width: double, totalHeight: double, bodyHeight: double, roundRadius: double, styles: [GraphicsStyle]) {
	corner = (totalHeight - bodyHeight) / 2.0;
	arrowStart = width - bodyHeight / 2.0 - corner;
	
	r = roundRadius;
	rr = r/2.0;
	ra = if (corner != 0.0) r*1.2 else 0.0;
	
	Graphics([
			MoveTo(r, corner),
			LineTo(arrowStart, corner),
			LineTo(arrowStart, ra * sqr2 / 2.0),
			CubicBezierTo(arrowStart + ra * sqr2 / 2.0, ra * sqr2 / 2.0, arrowStart + ra * (sqr2 - 1.0), ra * (sqr2 - 1.0)),
			LineTo(width - rr, totalHeight/2.0 - rr),
			// arrow tip
			CubicBezierTo(width - rr, totalHeight/2.0 + rr, width, corner + bodyHeight/2.0),
			LineTo(arrowStart + ra * sqr2 / 2.0, totalHeight - ra * sqr2 / 2.0),
			CubicBezierTo(
				arrowStart, 
				totalHeight - ra * sqr2 / 2.0, 
				arrowStart + ra * (sqr2 - 1.0),
				totalHeight - ra * (sqr2 - 1.0), 
			),
			LineTo(arrowStart, corner + bodyHeight),
			LineTo(rr, corner + bodyHeight),
			CubicBezierTo(0.0, corner + bodyHeight - rr, 0.0, corner + bodyHeight),
			
			LineTo(bodyHeight/2.0 - 2.0*rr, totalHeight/2.0 + rr),
			
			CubicBezierTo(bodyHeight/2.0 - 2.0*rr, totalHeight/2.0 - rr, bodyHeight/2.0 - rr, totalHeight/2.0),
			
			LineTo(0.0, corner + rr),
			CubicBezierTo(rr, corner, 0.0, corner)
		],
		styles
	)
}

makeLeftArrow(width: double, totalHeight: double, bodyHeight: double, roundRadius: double, styles: [GraphicsStyle]) {
	corner = (totalHeight - bodyHeight) / 2.0;
	arrowStart = totalHeight/2.0;
	
	r = roundRadius;
	rr = r/2.0;
	ra = if (corner != 0.0) r*1.2 else 0.0;
	
	Graphics([
			MoveTo(width - r, corner),
			LineTo(arrowStart, corner),
			LineTo(arrowStart, ra * sqr2 / 2.0),
			CubicBezierTo(arrowStart - ra * sqr2 / 2.0, ra * sqr2 / 2.0, arrowStart - ra * (sqr2 - 1.0), ra * (sqr2 - 1.0)),
			LineTo(rr, totalHeight/2.0 - rr),
			CubicBezierTo(rr, totalHeight/2.0 + rr, 0.0, corner + bodyHeight/2.0),
			LineTo(arrowStart - ra * sqr2 / 2.0, totalHeight - ra * sqr2 / 2.0),
			CubicBezierTo(
				arrowStart, 
				totalHeight - ra * sqr2 / 2.0, 
				arrowStart - ra * (sqr2 - 1.0),
				totalHeight - ra * (sqr2 - 1.0), 
			),
			LineTo(arrowStart, corner + bodyHeight),
			LineTo(width - r, corner + bodyHeight),
			CubicBezierTo(width, corner + bodyHeight - r, width, corner + bodyHeight),
			LineTo(width, corner + r),
			CubicBezierTo(width - r, corner, width, corner)
		],
		styles
	)
}