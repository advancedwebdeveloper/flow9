// Â© Copyright 2011 Area9 Technologies.

import runtime;
import form/form;
import form/formmetrics;
import form/formtransforms;

export {
	// Set predefined baseline for the form
	fixBaseline(baseline : double, form : Form) -> Form;

	// Set variable baseline for the form
	fixBaselineB(expectedBaselineB : Behaviour<double>, form : Form) -> Form;

	// shift baseline of the static form
	shiftBaseline(shift : double, form : Form) -> Form;

	// shift baseline of the static form
	shiftBaselineB(shift : Behaviour<double>, form : Form) -> Form;
}

// form baseline control

// Set predefined baseline for the form
fixBaseline(baseline : double, form : Form) -> Form {
	if (baseline > 0.0) { // incl. normal baseline and superscript
		Baseline(const(baseline), form);
	} else { // very low subscript - baseline is over the top of the glyph
		Border(0.0, -baseline, 0.0, 0.0, form)
	}
}


// Set variable baseline for the form, but never affecting the height of the form
fixBaselineB(expectedBaselineB : Behaviour<double>, form : Form) -> Form {
	if (isStaticForm(form)) {
		wh = getStaticFormSizeCached(form);
		value = make(0.0);
		Constructor(
			Baseline(value, form),
			\ -> connectSelectDistinctu(expectedBaselineB, value, \baseline -> min(max(baseline, 0.0), wh.height))
		)
	} else {
		wh = make(zeroWH);
		value = make(0.0);
		Constructor(
			Baseline(value, Inspect([ISize(wh)], form)),
			\ -> connectSelect2Distinctu(wh, expectedBaselineB, value, \mwh, baseline -> min(max(baseline, 0.0), mwh.height))
		)
	}
}

// shift baseline of the static form
shiftBaseline(shift : double, form : Form) -> Form {
	baseline = getFormBaseline(form);

	fixBaseline(baseline+shift, form)
}

// shift baseline of the static form
shiftBaselineB(shift : Behaviour<double>, form : Form) -> Form {
	unpair(getDynamicFormSize(form), \formM, mB -> {
		baseline = make(0.0);
		Constructor(
			fixBaselineB(baseline, formM),
			\ -> connectSelect2Distinctu(mB, shift, baseline, \m, s -> m.baseline+s)
		)
	})
}
