// Â© Copyright 2012 Area9 Technologies.
/**
 * DoubleMetaphone.hx, contains the definition of a C++ template class which implements
 * Lawrence Phillips' Double Metaphone phonetic matching algorithm, as published in the 
 * June 2000 issue of C/C++ Users Journal. 
 * 
 * Translated from C++ implementation by Adam J. Nelson (anelson@apocryph.org)
 * found on http://www.codeproject.com/KB/string/dmetaphone1.aspx
 * which contains this license:
 *
 * This article, along with any associated source code and files, is licensed under The Code Project Open License (CPOL)
 *
 * http://www.codeproject.com/info/cpol10.aspx
 */

import runtime;
import string;

export {
	DoubleMetaphone : (primaryKey : string, alternateKey : string, hasAlternate : bool);
	
	buildDoubleMetaphoneKeys : (original_word : string) -> DoubleMetaphone;
	isEmptyDoubleMetaphone : (dm : DoubleMetaphone) -> bool;
	equalDoubleMetaphones : (dm1 : DoubleMetaphone, dm2 : DoubleMetaphone) -> bool;
}

isEmptyDoubleMetaphone(dm : DoubleMetaphone) {
	dm.primaryKey == "" && dm.alternateKey == "";
}

equalDoubleMetaphones(dm1, dm2) {
	//if (dm1.keyLength != dm2.keyLength) { // in flow implementation all keyLength are equal
	//	false;
	//} else {
		(dm1.primaryKey == dm2.primaryKey) ||
		(dm2.hasAlternate && dm1.primaryKey == dm2.alternateKey) ||
		(dm1.hasAlternate && dm1.alternateKey == dm2.primaryKey) ||
		(dm1.hasAlternate && dm2.hasAlternate && dm1.alternateKey == dm2.alternateKey)
	//}
}


buildDoubleMetaphoneKeys(original_word) {
	/*
		var current : Int = 0;
		if (m_length < 1)
			return;
	*/
	word = toUpperCase(original_word);
	current = ref 0;
	m_length = strlen(word);
	m_last = m_length - 1; //zero based index
	keyLength = 5;
	emptyDM = DoubleMetaphone("", "", false);
	
	start = if (areStringsAt(word, 0, 2, ["GN", "KN", "PN", "WR", "PS"])) {
		//skip first letter
		current := 1;
		emptyDM;
	} else if (getCharAt(word, 0) == "X") {
		//Initial 'X' is pronounced 'Z' e.g. 'Xavier'
		current := 1;
		addMetaphoneCharacter(emptyDM, "S", ""); //'Z' maps to 'S'
	} else {
		emptyDM;
	}
	
	for (
		start,
		\dm -> strlen(dm.primaryKey) < keyLength && strlen(dm.alternateKey) < keyLength && ^current < m_length,
		\dm -> {
			ch = getCharAt(word, ^current);
			
			if (ch == "A" || ch == "E" || ch == "I" || ch == "O" || ch == "U" || ch == "Y") {
				if (^current == 0) {
					//all init vowels now map to 'A'
					current := ^current + 1;
					addMetaphoneCharacter(dm, "A", "");
				} else {
					current := ^current + 1;
					dm;
				}
			} else if (ch == "B") {
				//"-mb", "e.g", "dumb", already skipped over...
				if (getCharAt(word, ^current + 1) == "B") {
					current := ^current + 2;
				} else {
					current := ^current + 1;
				}
				addMetaphoneCharacter(dm, "P", "");
			} else if (ch == "C") {
				//various germanic
				if ((^current > 1)
					&& !isVowel(word, ^current - 2) 
					&& areStringsAt(word, (^current - 1), 3, ["ACH"]) 
					&& ((getCharAt(word, ^current + 2) != "I") && ((getCharAt(word, ^current + 2) != "E")
						|| areStringsAt(word, (^current - 2), 6, ["BACHER", "MACHER"])))) {
					current := ^current + 2;
					addMetaphoneCharacter(dm, "K", "");
				} else 
				
				//special case 'caesar'
				if ((^current == 0) && areStringsAt(word, ^current, 6, ["CAESAR"])) {
					current := ^current + 2;
					addMetaphoneCharacter(dm, "S", "");
				} else 
				
				//italian 'chianti'
				if (areStringsAt(word, ^current, 4, ["CHIA"])) {
					current := ^current + 2;
					addMetaphoneCharacter(dm, "K", "");
				} else 
				
				if (areStringsAt(word, ^current, 2, ["CH"])) {
					//find 'michael'
					if ((^current > 0) && areStringsAt(word, ^current, 4, ["CHAE"])) {
						current := ^current + 2;
						addMetaphoneCharacter(dm, "K", "X");
					} else 
					
					//greek roots e.g. 'chemistry', 'chorus'
					if ((^current == 0)
						&& (areStringsAt(word, (^current + 1), 5, ["HARAC", "HARIS"]) 
							|| areStringsAt(word, (^current + 1), 3, ["HOR", "HYM", "HIA", "HEM"])) 
						&& !areStringsAt(word, 0, 5, ["CHORE"])) {
						current := ^current + 2;
						addMetaphoneCharacter(dm, "K", "");
					} else
					
					//germanic, greek, or otherwise 'ch' for 'kh' sound
					if ((areStringsAt(word, 0, 3, ["VAN ", "VON ", "SCH"]))
						// 'architect but not 'arch', 'orchestra', 'orchid'
						|| areStringsAt(word, (^current - 2), 6, ["ORCHES", "ARCHIT", "ORCHID"])
						|| areStringsAt(word, (^current + 2), 1, ["T", "S"])
						|| ((areStringsAt(word, (^current - 1), 1, ["A", "O", "U", "E"]) || (^current == 0))
							//e.g., 'wachtler', 'wechsler', but not 'tichner'
							&& areStringsAt(word, (^current + 2), 1, ["L", "R", "N", "M", "B", "H", "F", "V", "W", " "]))) {
						current := ^current + 2;
						addMetaphoneCharacter(dm, "K", "");
					} else {
						if (^current > 0) {
							if (areStringsAt(word, 0, 1, ["MC"])) {
								//e.g., "McHugh"
								current := ^current + 2;
								addMetaphoneCharacter(dm, "K", "");
							} else {
								current := ^current + 2;
								addMetaphoneCharacter(dm, "X", "K");
							}
						} else {
							current := ^current + 2;
							addMetaphoneCharacter(dm, "X", "");
						}
					}
				} else
				
				//e.g, 'czerny'
				if (areStringsAt(word, ^current, 2, ["CZ"]) && !areStringsAt(word, (^current - 2), 4, ["WICZ"])) {
					current := ^current + 2;
					addMetaphoneCharacter(dm, "S", "X");
				} else
				
				//e.g., 'focaccia'
				if (areStringsAt(word, (^current + 1), 3, ["CIA"])) {
					current := ^current + 3;
					addMetaphoneCharacter(dm, "X", "");
				} else
				
				//double 'C', but not if e.g. 'McClellan'
				if (areStringsAt(word, ^current, 2, ["CC"]) && !((^current == 1) && (getCharAt(word, 0) == "M"))) {
					//'bellocchio' but not 'bacchus'
					if (areStringsAt(word, (^current + 2), 1, ["I", "E", "H"]) && !areStringsAt(word, (^current + 2), 2, ["HU"])) {
						//'accident', 'accede' 'succeed'
						if (((^current == 1) && (getCharAt(word, ^current - 1) == "A")) 
							|| areStringsAt(word, (^current - 1), 5, ["UCCEE", "UCCES"])) {
							current := ^current + 3;
							addMetaphoneCharacter(dm, "KS", "");
						}
						//'bacci', 'bertucci', other italian
						else {
							current := ^current + 3;
							addMetaphoneCharacter(dm, "X", "");
						}
					} else {//Pierce's rule
						current := ^current + 2;
						addMetaphoneCharacter(dm, "K", "");
					}
				} else
				
				if (areStringsAt(word, ^current, 2, ["CK", "CG", "CQ"])) {
					current := ^current + 2;
					addMetaphoneCharacter(dm, "K", "");
				} else
				
				if (areStringsAt(word, ^current, 2, ["CI", "CE", "CY"])) {
					//italian vs. english
					if (areStringsAt(word, ^current, 3, ["CIO", "CIE", "CIA"])) {
						current := ^current + 2;
						addMetaphoneCharacter(dm, "S", "X");
					} else {
						current := ^current + 2;
						addMetaphoneCharacter(dm, "S", "");
					}
				} else
				
				{
					//name sent in 'mac caffrey', 'mac gregor
					if (areStringsAt(word, (^current + 1), 2, [" C", " Q", " G"])) {
						current := ^current + 3;
					} else if (areStringsAt(word, (^current + 1), 1, ["C", "K", "Q"]) 
							&& !areStringsAt(word, (^current + 1), 2, ["CE", "CI"])) {
						current := ^current + 2;
					} else {
						current := ^current + 1;
					}
					
					addMetaphoneCharacter(dm, "K", "");
				}
			} else if (ch == "D") {
				if (areStringsAt(word, ^current, 2, ["DG"])) {
					if (areStringsAt(word, (^current + 2), 1, ["I", "E", "Y"])) {
						//e.g. 'edge'
						current := ^current + 3;
						addMetaphoneCharacter(dm, "J", "");
					} else {
						//e.g. 'edgar'
						current := ^current + 2;
						addMetaphoneCharacter(dm, "TK", "");
					}
				} else if (areStringsAt(word, ^current, 2, ["DT", "DD"])) {
					current := ^current + 2;
					addMetaphoneCharacter(dm, "T", "");
				} else {
					current := ^current + 1;
					addMetaphoneCharacter(dm, "T", "");
				}
			} else if (ch == "F") {
				if (getCharAt(word, ^current + 1) == "F") {
					current := ^current + 2;
				} else {
					current := ^current + 1;
				}
				addMetaphoneCharacter(dm, "F", "");
			} else if (ch == "G") {
				if (getCharAt(word, ^current + 1) == "H") {
					if ((^current > 0) && !isVowel(word, ^current - 1)) {
						current := ^current + 2;
						addMetaphoneCharacter(dm, "K", "");
					} else if (^current < 3 && ^current == 0) {
						//'ghislane', ghiradelli
						if (getCharAt(word, ^current + 2) == "I") {
							current := ^current + 2;
							addMetaphoneCharacter(dm, "J", "");
						} else {
							current := ^current + 2;
							addMetaphoneCharacter(dm, "K", "");
						}
					} else 
					//Parker's rule (with some further refinements) - e.g., 'hugh'
					if (((^current > 1) && areStringsAt(word, (^current - 2), 1, ["B", "H", "D"]))
						//e.g., 'bough'
						|| ((^current > 2) && areStringsAt(word, (^current - 3), 1, ["B", "H", "D"]))
						//e.g., 'broughton'
						|| ((^current > 3) && areStringsAt(word, (^current - 4), 1, ["B", "H"]))) {
						current := ^current + 2;
						dm;
					} else {
						//e.g., 'laugh', 'McLaughlin', 'cough', 'gough', 'rough', 'tough'
						if ((^current > 2) 
							&& (getCharAt(word, ^current - 1) == "U") 
							&& areStringsAt(word, (^current - 3), 1, ["C", "G", "L", "R", "T"])) {
							current := ^current + 2;
							addMetaphoneCharacter(dm, "F", "");
						} else {
							if ((^current > 0) && getCharAt(word, ^current - 1) != "I") {
								current := ^current + 2;
								addMetaphoneCharacter(dm, "K", "");
							} else {
								current := ^current + 2;
								dm;
							}
						}
					}
				} else if (getCharAt(word, ^current + 1) == "N") {
					if ((^current == 1) && isVowel(word, 0) && !isWordSlavoGermanic(word)) {
						current := ^current + 2;
						addMetaphoneCharacter(dm, "KN", "N");
					} else
					//not e.g. 'cagney'
					if (!areStringsAt(word, (^current + 2), 2, ["EY"]) 
						&& (getCharAt(word, ^current + 1) != "Y") && !isWordSlavoGermanic(word)) {
						current := ^current + 2;
						addMetaphoneCharacter(dm, "N", "KN");
					} else {
						current := ^current + 2;
						addMetaphoneCharacter(dm, "KN", "");
					}
				} else
				
				//'tagliaro'
				if (areStringsAt(word, (^current + 1), 2, ["LI"]) && !isWordSlavoGermanic(word)) {
					current := ^current + 2;
					addMetaphoneCharacter(dm, "KL", "L");
				} else
				
				//-ges-,-gep-,-gel-, -gie- at beginning
				if ((^current == 0)
					&& ((getCharAt(word, ^current + 1) == "Y") 
					     || areStringsAt(word, (^current + 1), 2, ["ES", "EP", "EB", "EL", "EY", "IB", "IL", "IN", "IE", "EI", "ER"]))) {
					current := ^current + 2;
					addMetaphoneCharacter(dm, "K", "J");
				} else
				
				// -ger-,  -gy-
				if ((areStringsAt(word, (^current + 1), 2, ["ER"]) || (getCharAt(word, ^current + 1) == "Y"))
					&& !areStringsAt(word, 0, 6, ["DANGER", "RANGER", "MANGER"])
					&& !areStringsAt(word, (^current - 1), 1, ["E", "I"]) 
					&& !areStringsAt(word, (^current - 1), 3, ["RGY", "OGY"])) {
					current := ^current + 2;
					addMetaphoneCharacter(dm, "K", "J");
				} else
				
				// italian e.g, 'biaggi'
				if (areStringsAt(word, (^current + 1), 1, ["E", "I", "Y"]) || areStringsAt(word, (^current - 1), 4, ["AGGI", "OGGI"])) {
					//obvious germanic
					if ((areStringsAt(word, 0, 4, ["VAN ", "VON "]) || areStringsAt(word, 0, 3, ["SCH"]))
						|| areStringsAt(word, (^current + 1), 2, ["ET"])) {
						current := ^current + 2;
						addMetaphoneCharacter(dm, "K", "");
					} else
					//always soft if french ending
					if (areStringsAt(word, (^current + 1), 4, ["IER "])) {
						current := ^current + 2;
						addMetaphoneCharacter(dm, "J", "");
					} else {
						current := ^current + 2;
						addMetaphoneCharacter(dm, "J", "K");
					}
				} else {
					if (getCharAt(word, ^current + 1) == "G") {
						current := ^current + 2;
					} else {
						current := ^current + 1;
					}
					addMetaphoneCharacter(dm, "K", "");
				}
			} else if (ch == "H") {
				//only keep if first & before vowel or btw. 2 vowels
				if (((^current == 0) || isVowel(word, ^current - 1)) 
					&& isVowel(word, ^current + 1)) {
					current := ^current + 2;
					addMetaphoneCharacter(dm, "H", "");
				} else { //also takes care of 'HH'
					current := ^current + 1;
					dm;
				}
			} else if (ch == "J") {
				chJ = 
				//obvious spanish, 'jose', 'san jacinto'
				if (areStringsAt(word, ^current, 4, ["JOSE"]) || areStringsAt(word, 0, 4, ["SAN "])) {
					if (((^current == 0) && (getCharAt(word, ^current + 4) == " ")) || areStringsAt(word, 0, 4, ["SAN "])) {
						current := ^current + 1;
						addMetaphoneCharacter(dm, "H", "");
					} else {
						current := ^current + 1;
						addMetaphoneCharacter(dm, "J", "H");
					}
				} else
				
				if ((^current == 0) && !areStringsAt(word, ^current, 4, ["JOSE"])) {
					addMetaphoneCharacter(dm, "J", "A");//Yankelovich/Jankelowicz
				} else
				//spanish pron. of e.g. 'bajador'
				if (isVowel(word, ^current - 1) 
						&& !isWordSlavoGermanic(word)
						&& ((getCharAt(word, ^current + 1) == "A") || (getCharAt(word, ^current + 1) == "O"))) {
					addMetaphoneCharacter(dm, "J", "H");
				} else if (^current == m_last) {
					addMetaphoneCharacter(dm, "J", " ");
				} else if (!areStringsAt(word, (^current + 1), 1, ["L", "T", "K", "S", "N", "M", "B", "Z"]) 
						&& !areStringsAt(word, (^current - 1), 1, ["S", "K", "L"])) {
					addMetaphoneCharacter(dm, "J", "");
				} else {
					dm;
				}
				
				if (getCharAt(word, ^current + 1) == "J") { //it could happen!
					current := ^current + 2;
				} else {
					current := ^current + 1;
				}
				
				chJ;
			} else if (ch == "K") {
				if (getCharAt(word, ^current + 1) == "K") {
					current := ^current + 2;
				} else {
					current := ^current + 1;
				}
				addMetaphoneCharacter(dm, "K", "");
			} else if (ch == "L") {
				chL = 
				if (getCharAt(word, ^current + 1) == "L") {
					//spanish e.g. 'cabrillo', 'gallegos'
					if (((^current == (m_length - 3)) 
					     && areStringsAt(word, (^current - 1), 4, ["ILLO", "ILLA", "ALLE"]))
					    || ((areStringsAt(word, (m_last - 1), 2, ["AS", "OS"]) || areStringsAt(word, m_last, 1, ["A", "O"]))
					        && areStringsAt(word, (^current - 1), 4, ["ALLE"]))) {
					    current := ^current + 2;
					    addMetaphoneCharacter(dm, "L", " ");
					} else {
						current := ^current + 2;
						dm;
					}
				} else {
					current := ^current + 1;
					dm;
				}
				addMetaphoneCharacter(chL, "L", "");
			} else if (ch == "M") {
				if ((areStringsAt(word, (^current - 1), 3, ["UMB"]) 
				     && (((^current + 1) == m_last) || areStringsAt(word, (^current + 2), 2, ["ER"])))
				    //'dumb','thumb'
				    ||  (getCharAt(word, ^current + 1) == "M")) {
				    current := ^current + 2;
				} else {
					current := ^current + 1;
				}
				addMetaphoneCharacter(dm, "M", "");
			} else if (ch == "N") {
				if (getCharAt(word, ^current + 1) == "N") {
					current := ^current + 2;
				} else {
					current := ^current + 1;
				}
				addMetaphoneCharacter(dm, "N", "");
			} else if (ch == "P") {
				if (getCharAt(word, ^current + 1) == "H") {
					current := ^current + 2;
					addMetaphoneCharacter(dm, "F", "");
				} else {
					//also account for _TEXT("campbell"), _TEXT("raspberry")
					if (areStringsAt(word, (^current + 1), 1, ["P", "B"])) {
						current := ^current + 2;
					} else {
						current := ^current + 1;
					}
					addMetaphoneCharacter(dm, "P", "");
				}
			} else if (ch == "Q") {
				if (getCharAt(word, ^current + 1) == "Q") {
					current := ^current + 2;
				} else {
					current := ^current + 1;
				}
				addMetaphoneCharacter(dm, "K", "");
			} else if (ch == "R") {
				chR = 
				//french e.g. 'rogier', but exclude 'hochmeier'
				if ((^current == m_last)
					&& !isWordSlavoGermanic(word)
					&& areStringsAt(word, (^current - 2), 2, ["IE"]) 
					&& !areStringsAt(word, (^current - 4), 2, ["ME", "MA"])) {
					addMetaphoneCharacter(dm, "", "R");
				} else {
					addMetaphoneCharacter(dm, "R", "");
				}
				if (getCharAt(word, ^current + 1) == "R") {
					current := ^current + 2;
				} else {
					current := ^current + 1;
				}
				chR;
			} else if (ch == "S") {
				//special cases 'island', 'isle', 'carlisle', 'carlysle'
				if (areStringsAt(word, (^current - 1), 3, ["ISL", "YSL"])) {
					current := ^current + 1;
					dm;
				} else
				
				//special case 'sugar-'
				if ((^current == 0) && areStringsAt(word, ^current, 5, ["SUGAR"])) {
					current := ^current + 1;
					addMetaphoneCharacter(dm, "X", "S");
				} else
				
				if (areStringsAt(word, ^current, 2, ["SH"])) {
					//germanic
					if (areStringsAt(word, (^current + 1), 4, ["HEIM", "HOEK", "HOLM", "HOLZ"])) {
						current := ^current + 2;
						addMetaphoneCharacter(dm, "S", "");
					} else {
						current := ^current + 2;
						addMetaphoneCharacter(dm, "X", "");
					}
				} else
				
				//italian & armenian
				if (areStringsAt(word, ^current, 3, ["SIO", "SIA"]) || areStringsAt(word, ^current, 4, ["SIAN"])) {
					if (!isWordSlavoGermanic(word)) {
						current := ^current + 3;
						addMetaphoneCharacter(dm, "S", "X");
					} else {
						current := ^current + 3;
						addMetaphoneCharacter(dm, "S", "");
					}
				} else
				
				//german & anglicisations, e.g. 'smith' match 'schmidt', 'snider' match 'schneider'
				//also, -sz- in slavic language altho in hungarian it is pronounced 's'
				if (((^current == 0) 
					 && areStringsAt(word, (^current + 1), 1, ["M", "N", "L", "W"]))
					|| areStringsAt(word, (^current + 1), 1, ["Z"])) {
					if (areStringsAt(word, (^current + 1), 1, ["Z"])) {
						current := ^current + 2;
					} else {
						current := ^current + 1;
					}
					addMetaphoneCharacter(dm, "S", "X");
				} else
				
				if (areStringsAt(word, ^current, 2, ["SC"])) {
					//Schlesinger's rule
					if (getCharAt(word, ^current + 2) == "H") {
						//dutch origin, e.g. 'school', 'schooner'
						if (areStringsAt(word, (^current + 3), 2, ["OO", "ER", "EN", "UY", "ED", "EM"])) {
							//'schermerhorn', 'schenker'
							if (areStringsAt(word, (^current + 3), 2, ["ER", "EN"])) {
								current := ^current + 3;
								addMetaphoneCharacter(dm, "X", "SK");
							} else {
								current := ^current + 3;
								addMetaphoneCharacter(dm, "SK", "");
							}
						} else {
							if ((^current == 0) && !isVowel(word, 3) && (getCharAt(word, 3) != "W")) {
								current := ^current + 3;
								addMetaphoneCharacter(dm, "X", "S");
							} else {
								current := ^current + 3;
								addMetaphoneCharacter(dm, "X", "");
							}
						}
					} else
					
					if (areStringsAt(word, (^current + 2), 1, ["I", "E", "Y"])) {
						current := ^current + 3;
						addMetaphoneCharacter(dm, "S", "");
					} else {
						current := ^current + 3;
						addMetaphoneCharacter(dm, "SK", "");
					}
				} else {
					chS =
					//french e.g. 'resnais', 'artois'
					if ((^current == m_last) && areStringsAt(word, (^current - 2), 2, ["AI", "OI"])) {
						addMetaphoneCharacter(dm, "", "S");
					} else {
						addMetaphoneCharacter(dm, "S", "");
					}
					
					if (areStringsAt(word, (^current + 1), 1, ["S", "Z"])) {
						current := ^current + 2;
					} else {
						current := ^current + 1;
					}
					
					chS;
				}
			} else if (ch == "T") {
				if (areStringsAt(word, ^current, 4, ["TION"])) {
					current := ^current + 3;
					addMetaphoneCharacter(dm, "X", "");
				} else
				
				if (areStringsAt(word, ^current, 3, ["TIA", "TCH"])) {
					current := ^current + 3;
					addMetaphoneCharacter(dm, "X", "");
				} else
				
				if (areStringsAt(word, ^current, 2, ["TH"]) 
					|| areStringsAt(word, ^current, 3, ["TTH"])) {
					//special case 'thomas', 'thames' or germanic
					if (areStringsAt(word, (^current + 2), 2, ["OM", "AM"])
						|| areStringsAt(word, 0, 4, ["VAN ", "VON "])
						|| areStringsAt(word, 0, 3, ["SCH"])) {
						current := ^current + 2;
						addMetaphoneCharacter(dm, "T", "");
					} else {
						current := ^current + 2;
						addMetaphoneCharacter(dm, "0", "T");
					}
				} else {
					if (areStringsAt(word, (^current + 1), 1, ["T", "D"])) {
						current := ^current + 2;
					} else {
						current := ^current + 1;
					}
					addMetaphoneCharacter(dm, "T", "");
				}
			} else if (ch == "V") {
				if (getCharAt(word, ^current + 1) == "V") {
					current := ^current + 2;
				} else {
					current := ^current + 1;
				}
				addMetaphoneCharacter(dm, "F", "");
			} else if (ch == "W") {
				//can also be in middle of word
				if (areStringsAt(word, ^current, 2, ["WR"])) {
					current := ^current + 2;
					addMetaphoneCharacter(dm, "R", "");
				} else {
					chW = 
					if ((^current == 0) && (isVowel(word, ^current + 1) || areStringsAt(word, ^current, 2, ["WH"]))) {
						//Wasserman should match Vasserman
						if (isVowel(word, ^current + 1)) {
							addMetaphoneCharacter(dm, "A", "F");
						} else {
							//need Uomo to match Womo
							addMetaphoneCharacter(dm, "A", "");
						}
					} else {
						dm;
					}
					
					//Arnow should match Arnoff
					if (((^current == m_last) && isVowel(word, ^current - 1)) 
						|| areStringsAt(word, (^current - 1), 5, ["EWSKI", "EWSKY", "OWSKI", "OWSKY"]) 
						|| areStringsAt(word, 0, 3, ["SCH"])) {
						current := ^current + 1;
						addMetaphoneCharacter(chW, "", "F");
					} else
					
					//polish e.g. 'filipowicz'
					if (areStringsAt(word, ^current, 4, ["WICZ", "WITZ"])) {
						current := ^current + 4;
						addMetaphoneCharacter(chW, "TS", "FX");
					} else {
						//else skip it
						current := ^current + 1;
						chW;
					}
				}
			} else if (ch == "X") {
				chX =
 				//french e.g. breaux
				if (!((^current == m_last) 
					  && (areStringsAt(word, (^current - 3), 3, ["IAU", "EAU"]) 
						   || areStringsAt(word, (^current - 2), 2, ["AU", "OU"])))) {
					addMetaphoneCharacter(dm, "KS", "");
				} else {
					dm;
				}
				if (areStringsAt(word, (^current + 1), 1, ["C", "X"])) {
					current := ^current + 2;
				} else {
					current := ^current + 1;
				}
				chX;
			} else if (ch == "Z") {
				chZ = 
				//chinese pinyin e.g. 'zhao'
				if (getCharAt(word, ^current + 1) == "H") {
					addMetaphoneCharacter(dm, "J", "");
				} else if (areStringsAt(word, (^current + 1), 2, ["ZO", "ZI", "ZA"]) 
						|| (isWordSlavoGermanic(word) && ((^current > 0) && getCharAt(word, ^current - 1) != "T"))) {
					addMetaphoneCharacter(dm, "S", "TS");
				} else {
					addMetaphoneCharacter(dm, "S", "");
				}
				
				if (getCharAt(word, ^current + 1) == "H" || getCharAt(word, ^current + 1) == "Z") {
					current := ^current + 2;
				} else {
					current := ^current + 1;
				}
				chZ;
			} else {
				current := ^current + 1;
				dm;
			}
		}
	)
}

areStringsAt(word, start, len, words) {
	if (start < 0) {
		//Sometimes, as a result of expressions like "current - 2" for start, 
		//start ends up negative.  Since no string can be present at a negative offset, this is always false
		false;
	} else {
		sub = substring(word, start, len);
		contains(words, sub);
	}
}

addMetaphoneCharacter(dm, primaryCharacter, alternateCharacter) {
	primary = 
		//Is the primary character valid?
		if (primaryCharacter != "") {
			dm.primaryKey + primaryCharacter;
		} else {
			dm.primaryKey;
		}
	
	//Is the alternate character valid?
	hasAlternate = alternateCharacter != "";
	
	alternate = 
		//Is the alternate character valid?
		if (alternateCharacter != "") {
			//Alternate character was provided.  If it is not zero-length, append it, else
			//append the primary string as long as it wasn't zero length and isn't a space character
			//m_hasAlternate = true; // todo: check if it is needed
			if (getCharAt(alternateCharacter, 0) != " ") {
				dm.alternateKey + alternateCharacter;
			} else {
				dm.alternateKey;
			}
		} else if (primaryCharacter != "" && getCharAt(primaryCharacter, 0) != " ") {
			// Else, no alternate character was passed, but a primary was, so append the primary character to the alternate key
			dm.alternateKey + primaryCharacter;
		} else {
			dm.alternateKey;
		}
	
	DoubleMetaphone(primary, alternate, hasAlternate || dm.hasAlternate);
}

// Returns true if letter at given position in word is a Roman vowel
isVowel(str : string, pos : int) {
	if ((pos < 0) || (pos >= strlen(str))) {
		false;
	} else {
		it = getCharAt(str, pos);
		(it == "E") || (it == "A") || (it == "I") || (it == "O") || (it == "U") || (it == "Y")
	}
}

isWordSlavoGermanic(word : string) {
	(strIndexOf(word, "W") != -1) || (strIndexOf(word, "K") != -1) || (strIndexOf(word, "CZ") != -1) || (strIndexOf(word, "WITZ") != -1)
}
