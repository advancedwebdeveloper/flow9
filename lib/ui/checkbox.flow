// Â© Copyright 2011 Area9 Technologies.

import basecolors;
import behaviour;
import form/form;
import form/gui;

export {
	SimpleCheckBox(caption: Form, value: DynamicBehaviour<bool>) -> Form;

	// The size of the checkbox can be controlled with this one
	CheckBox(caption: Form, value: DynamicBehaviour<bool>, size : double) -> Form;

	// Tri-state check box
	ExtendedCheckBox(caption : Form, value: DynamicBehaviour<bool>, size : double, enable : Behaviour<bool>, partialvalue : Behaviour<bool>) -> Form;
	ExtendedCheckBox2(caption : Form, value: DynamicBehaviour<bool>, size : double, enable : Behaviour<bool>, partialvalue : Behaviour<bool>, stroke : int, mark : int) -> Form;
	// Checkbox using custom forms for all states
	CustomCheckBox(caption : Form, value: DynamicBehaviour<bool>, enable : Behaviour<bool>, partialvalue : Behaviour<bool>, unChecked : Form, checked : Form, partialchecked : Form) -> Form;

	// TODO: consider to add this, which should set a correct baseline, and default to a font size of 13.0 to match EasyButton
	// TextCheckBox(text : string, value : DynamicBehaviour<bool>, style : [CharacterStyle]) -> Form

	// This is bad form. Use the one above, which can do the same thing, just better.
	SimpleCheckButton(caption: Form, onAtStart: bool, onClick: (bool) -> void) -> Form;
	SimpleCheckButton2(caption: Form, state : DynamicBehaviour<bool>, onClick: (bool) -> void) -> Form;
}

SimpleCheckBox(caption: Form, value: DynamicBehaviour<bool>) -> Form {
	CheckBox(caption, value, 20.0)
}

SimpleCheckButton(caption: Form, onAtStart: bool, onClick: (bool) -> void) -> Form {
	SimpleCheckButton2(caption, make(onAtStart), onClick)
}

SimpleCheckButton2(caption: Form, state : DynamicBehaviour<bool>, onClick: (bool) -> void) -> Form {
	Constructor(
		SimpleCheckBox(caption, state),
		\-> subscribe2(state, onClick)
	)
}

CheckBox(caption : Form, value: DynamicBehaviour<bool>, size : double) -> Form {
	ExtendedCheckBox(caption, value, size, const(true), const(false));
}

ExtendedCheckBox(caption : Form, value: DynamicBehaviour<bool>, size : double, enable : Behaviour<bool>, partialvalue : Behaviour<bool>) -> Form {
	ExtendedCheckBox2(caption, value, size, enable, partialvalue, black, black);
}

ExtendedCheckBox2(caption : Form, value: DynamicBehaviour<bool>, size : double, enable : Behaviour<bool>, partialvalue : Behaviour<bool>, stroke : int, mark : int) -> Form {
	makeCheckSign = \text, color ->
		Rounded(1.0, [Stroke(stroke), Fill(white)],
			Border(1.0, 1.0, 1.0, 1.0,
				FixSize(size, size,
					Offset(size / 15.0, -size / 10.0,
						Text(text, [FontSize(size), FontFamily("DejaVuSans"), Fill(color)])
					)
				)
			)
		);

	unChecked = makeCheckSign(" ", mark);
	checked = makeCheckSign("&#x2714;", mark);
	partialchecked = makeCheckSign("&#x2714;", 0xb8b4b5);

	CustomCheckBox(caption, value, enable, partialvalue, unChecked, checked, partialchecked)
}

CustomCheckBox(caption : Form, value: DynamicBehaviour<bool>, enable : Behaviour<bool>, partialValue : Behaviour<bool>, unChecked : Form, checked : Form, partialchecked : Form) -> Form {
	isChecked = make(if (getValue(partialValue)) 2 else { if (getValue(value)) 1 else 0 });

	accessState = make("");
	opacity = make(1.0);

	box = Switch(isChecked, [
		unChecked,
		checked,
		partialchecked
	]);

	fn = \ -> if (getValue(enable)) nextDistinct(value, !getValue(value));

	Constructor(
		Access([AccessRole("checkbox"), AccessAttribute("aria-checked", accessState), AccessDescription(getFormText(caption)), AccessCallback(fn)],
			Cursor(FingerCursor(), Alpha(opacity,
				Button(Cols([box, Fixed(3.0, 0.0), caption]), fn)
			))
		),
		\ -> {
			uns = [
				connectSelect2Distinctu(value, partialValue, isChecked, \v, p -> {
					nextDistinct(accessState, if (v) "checked" else "unchecked");
					if (p) 2 else { if (v) 1 else 0 }
				}),
				connectSelectu(enable, opacity, \e -> if (e) 1.0 else 0.35)
			];
			\ -> applyall(uns);
		}
	);
}
