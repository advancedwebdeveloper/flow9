// Â© Copyright 2013 Area9 Technologies.

import ui/combobox;

export {
	EasyComboBox(items : [ComboBoxItem], selected : DynamicBehaviour<int>, styles : [ComboBoxStyle]) -> Form;

	// Moved from combobox:
	// Notice: if width < 61.0 then some errors may occur when scroller appears
	ComboBox2(
		minWidth : double,
		maxDropHeight : double,
		items : [Form],
		selectedB : DynamicBehaviour<int>,
		wBorder : double,
		hBorder : double,
		defaultForm : Form,
		colorScheme : ComboBoxColorScheme,
		disableMobileScaler : bool
	) -> Form;

	ComboBox(minWidth : double, maxDropHeight : double, items : [Form], selectedB : DynamicBehaviour<int>, wBorder : double, hBorder : double) -> Form;
	graySkinComboBox(minWidth : double, maxDropHeight : double, items : [Form], selectedB : DynamicBehaviour<int>, wBorder : double, hBorder : double) -> Form;

	setEasyBoxDesign(
		design : EasyBoxStyle,
		fn : ([ComboBoxItem], DynamicBehaviour<int>, [ComboBoxStyle]) -> Form
	) -> void;
}

easyBoxAPI : ref Tree<EasyBoxStyle, ([ComboBoxItem], DynamicBehaviour<int>, [ComboBoxStyle]) -> Form> = ref makeTree();
setEasyBoxDesign(design : EasyBoxStyle, fn : ([ComboBoxItem], DynamicBehaviour<int>, [ComboBoxStyle]) -> Form) -> void {
	easyBoxAPI := setTree(^easyBoxAPI, design, fn)
}

EasyComboBox(items : [ComboBoxItem], selected : DynamicBehaviour<int>, styles : [ComboBoxStyle]) -> Form {
	design = extractStruct(styles, ComboBoxDesign(EasyBoxDefault(), 0.0));
	makeCombo = lookupTreeDef(^easyBoxAPI, design.style, EasyComboBoxDefault);
	makeCombo(items, selected, styles)
}

EasyComboBoxDefault(items : [ComboBoxItem], selected : DynamicBehaviour<int>, styles : [ComboBoxStyle]) -> Form {
	addRightSpace = \f -> Border(0.0, 0.0, 10.0, 0.0, f);
	pitems = map(items, \item -> {
		switch(item) {
			NotSelectable(f): Pair(f, false);
			default: Pair(cast(item : ComboBoxItem -> Form) |> addRightSpace, true);
		}
	});

	width = ref fold(items, 10.0, \acc, i : ComboBoxItem -> {
		f = switch (i) {
			NotSelectable(fo): fo;
			default: cast(i : ComboBoxItem -> Form);
		}
		// Question: why "min"? may be "max"? probably "width" not sense
		min(acc, getStaticFormSize(f).width)
	});
	maxDropHeight = ref 400.0;
 	horizontalBorder = ref 10.0;
	verticalBorder = ref 3.0;
	noSelectionForm = ref Text("Click to see options...", SmallText);
	colorScheme = ref orangeSkin;
 	expanded = ref make(false);
 	enabled = ref const(true);
 	bevelSize = ref 2.0;
 	staticForm = ref None();
 	maxHeaderWidth = ref 0.0;	// 0.0 - no limit
 	isDropUp = ref false;
 	makeComboItemUIFnMb = ref None();
 	makeComboItemsListUIFnMb = ref None();
 	makeComboBodyUIFnMb = ref None();
 	disableMobileScaler = ref false;

	iter(styles, \style -> {
		switch (style: ComboBoxStyle) {
			ComboBoxWidth(w) : {
				width := w;
			}
			ComboBoxMaxDropHeight(height) : {
				maxDropHeight := height;
			}
			ComboBoxBorder(horizontal, vertical): {
				horizontalBorder := horizontal;
				verticalBorder := vertical;
			}
			ComboBoxNoSelection(form): {
				noSelectionForm := form;
			}
			ComboBoxColorScheme(__, __, __, __, __, __, __, __, __, __, __, __): {
				colorScheme := style;
			}
			ComboBoxExpanded(e): {
				expanded := e;
			}
			ComboBoxEnabled(e): {
				enabled := e;
			}
			ComboBoxBevel(size): {
				bevelSize := size;
			}
			ComboBoxStatic(f): {
				staticForm := Some(f);
			}
			ComboBoxMaxHeaderWidth(w): {
				maxHeaderWidth := w;
			}
			ComboBoxDropUp(): {
				isDropUp := true;
			}
			ComboBoxItemUIFn(fn): {
				makeComboItemUIFnMb := Some(fn);
			}
			ComboBoxItemsListUIFn(fn): {
				makeComboItemsListUIFnMb := Some(fn);
			}
			ComboBoxBodyUIFn(fn): {
				makeComboBodyUIFnMb := Some(fn);
			}
			ComboBoxDisableMobileScaler(): {
				disableMobileScaler := true;
			}
			ComboBoxDesign(__, __): {}
		}
	});

	// modify if we have ComboBoxDropUp
	if (isNone(^makeComboItemsListUIFnMb) && ^isDropUp) {
		dropUpFn = \itms: [Form], enbldB: Behaviour<bool>, mtrcs: ComboMetrics, clrScheme: ComboBoxColorScheme -> {
			Offset(0.0, -^maxDropHeight - 10.0,
				makeComboItemsListUI(itms, enbldB, mtrcs, clrScheme)
			)
		}
		makeComboItemsListUIFnMb := Some(dropUpFn);
	}

	ComboBoxCustom(
		^width,
		^maxDropHeight,
		pitems,
		selected,
		^horizontalBorder,
		^verticalBorder,
		^noSelectionForm,
		^colorScheme,
		^expanded,
		^enabled,
		^bevelSize,
		^staticForm,
		^maxHeaderWidth,
		^makeComboItemUIFnMb,
		^makeComboItemsListUIFnMb,
		^makeComboBodyUIFnMb,
		^disableMobileScaler
	)
}


////////////////////////////////
// Colored/skined combo boxes
////////////////////////////////

ComboBox2(
	minWidth : double,
	maxDropHeight : double,
	items : [Form],
	selectedB : DynamicBehaviour<int>,
	wBorder : double,
	hBorder : double,
	defaultForm : Form,
	colorScheme : ComboBoxColorScheme,
	disableMobileScaler : bool
	) -> Form
{
	styles = [
		ComboBoxWidth(minWidth),
		ComboBoxMaxDropHeight(maxDropHeight),
		ComboBoxBorder(hBorder, wBorder),
		ComboBoxNoSelection(defaultForm),
		colorScheme,
	];
	cstyles = if (disableMobileScaler) arrayPush(styles, ComboBoxDisableMobileScaler()) else styles;
	EasyComboBox(items, selectedB, cstyles);
}

// (ComboBoxColorScheme) -> ComboBox2
skinnedComboBox(skin : ComboBoxColorScheme) -> (double, double, [Form], DynamicBehaviour<int>, double, double) -> Form {
	\minWidth : double, maxDropHeight : double, items : [Form], selectedB : DynamicBehaviour<int>, wBorder : double, hBorder : double -> {
		ComboBox2(
			minWidth, maxDropHeight, items, selectedB,
			wBorder, hBorder, Text("Click to see options...", SmallText), skin, false
		);
	}
}
ComboBox(minWidth : double, maxDropHeight : double, items : [Form], selectedB : DynamicBehaviour<int>, wBorder : double, hBorder : double) -> Form {
	fn = skinnedComboBox(orangeSkin);
	fn(minWidth, maxDropHeight, items, selectedB, wBorder, hBorder);
}
graySkinComboBox(minWidth : double, maxDropHeight : double, items : [Form], selectedB : DynamicBehaviour<int>, wBorder : double, hBorder : double) -> Form {
	fn = skinnedComboBox(graySkin);
	fn(minWidth, maxDropHeight, items, selectedB, wBorder, hBorder);
}
